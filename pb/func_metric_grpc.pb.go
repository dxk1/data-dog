// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: func_metric.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FuncMetricReport_InvokeMetricReport_FullMethodName = "/pb.FuncMetricReport/InvokeMetricReport"
	FuncMetricReport_ReportLocalMetric_FullMethodName  = "/pb.FuncMetricReport/ReportLocalMetric"
)

// FuncMetricReportClient is the client API for FuncMetricReport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuncMetricReportClient interface {
	InvokeMetricReport(ctx context.Context, in *InvokeMetricRequest, opts ...grpc.CallOption) (*Reply, error)
	ReportLocalMetric(ctx context.Context, in *LocalMetricRequest, opts ...grpc.CallOption) (*Reply, error)
}

type funcMetricReportClient struct {
	cc grpc.ClientConnInterface
}

func NewFuncMetricReportClient(cc grpc.ClientConnInterface) FuncMetricReportClient {
	return &funcMetricReportClient{cc}
}

func (c *funcMetricReportClient) InvokeMetricReport(ctx context.Context, in *InvokeMetricRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, FuncMetricReport_InvokeMetricReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funcMetricReportClient) ReportLocalMetric(ctx context.Context, in *LocalMetricRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, FuncMetricReport_ReportLocalMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuncMetricReportServer is the server API for FuncMetricReport service.
// All implementations should embed UnimplementedFuncMetricReportServer
// for forward compatibility
type FuncMetricReportServer interface {
	InvokeMetricReport(context.Context, *InvokeMetricRequest) (*Reply, error)
	ReportLocalMetric(context.Context, *LocalMetricRequest) (*Reply, error)
}

// UnimplementedFuncMetricReportServer should be embedded to have forward compatible implementations.
type UnimplementedFuncMetricReportServer struct {
}

func (UnimplementedFuncMetricReportServer) InvokeMetricReport(context.Context, *InvokeMetricRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeMetricReport not implemented")
}
func (UnimplementedFuncMetricReportServer) ReportLocalMetric(context.Context, *LocalMetricRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLocalMetric not implemented")
}

// UnsafeFuncMetricReportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuncMetricReportServer will
// result in compilation errors.
type UnsafeFuncMetricReportServer interface {
	mustEmbedUnimplementedFuncMetricReportServer()
}

func RegisterFuncMetricReportServer(s grpc.ServiceRegistrar, srv FuncMetricReportServer) {
	s.RegisterService(&FuncMetricReport_ServiceDesc, srv)
}

func _FuncMetricReport_InvokeMetricReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncMetricReportServer).InvokeMetricReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuncMetricReport_InvokeMetricReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncMetricReportServer).InvokeMetricReport(ctx, req.(*InvokeMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuncMetricReport_ReportLocalMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncMetricReportServer).ReportLocalMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuncMetricReport_ReportLocalMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncMetricReportServer).ReportLocalMetric(ctx, req.(*LocalMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FuncMetricReport_ServiceDesc is the grpc.ServiceDesc for FuncMetricReport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuncMetricReport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FuncMetricReport",
	HandlerType: (*FuncMetricReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokeMetricReport",
			Handler:    _FuncMetricReport_InvokeMetricReport_Handler,
		},
		{
			MethodName: "ReportLocalMetric",
			Handler:    _FuncMetricReport_ReportLocalMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "func_metric.proto",
}
